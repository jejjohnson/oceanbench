#@package _global_
method: duacs

outputs:
  eval_ds:
    _target_: ocn_tools._src.utils.data.stack_dataarrays
    _partial_: true
    dataarrays: 
        ref: '${results.outputs.eval.ref}'
        study: '${oc.select:results.outputs.eval.methods.${method}}'
    ref_var: ref
    
  build_eval_ds:
      inp: ${..eval_ds}
      fns: 
          - ${F.call}
          - {_target_: "xarray.DataArray.to_dataset",  dim: 'variable', _partial_: true}
          - {_target_: "xarray.Dataset.dropna",  dim: 'time', _partial_: true}

  summary: ${metrics.outputs.summary}

  plot_ds:
    maps:
      _target_: ocn_tools._src.utils.data.stack_dataarrays
      _partial_: true
      dataarrays: 
          ref: '${results.outputs.plots.maps.ref}'
          study: '${oc.select:results.outputs.plots.maps.methods.${method}}'
  plots:
    build_ds:
      maps:
        inp: ${....plot_ds.maps}
        fns:
          - ${F.call}
          - {_target_: "xarray.DataArray.to_dataset",  dim: 'variable', _partial_: true}
    maps: ${plots.outputs.plots}



metrics:
  outputs:
    summary:
      method: '${method}'
      task: ${task.outputs.name}


hydra:
  sweeper:
      params:
          method: {_target_: builtins.str.join, _args_: [',', '${oc.dict.keys:results.outputs.eval.methods}']}

results: ???
task: ???

defaults:
  - /processing/pipe@outputs.plots.build_ds.maps
  - /plots/gfmaps@plots
  - /metrics/ose_gf@metrics
  - /funcs@_global_.F
  - /processing/pipe@outputs.build_eval_ds
  - _self_

